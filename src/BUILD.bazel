load("@angular//:index.bzl", "ng_module")
load("@build_bazel_rules_nodejs//:defs.bzl", "history_server", "rollup_bundle")
load("@build_bazel_rules_nodejs//internal/web_package:web_package.bzl", "web_package")
load("@build_bazel_rules_typescript//:defs.bzl", "ts_config", "ts_devserver")

package(default_visibility = ["//visibility:public"])

ts_config(
    name = "tsconfig-test",
    src = "tsconfig-test.json",
    deps = ["//:tsconfig"],
)

ts_config(
    name = "tsconfig-app",
    src = "tsconfig.app.json",
    deps = ["//:tsconfig"],
)

ng_module(
    name = "src",
    srcs = glob(
        ["*.ts"],
        exclude = ["main.ts"],
    ),
    tsconfig = ":tsconfig-app",
    deps = [
        "//src/app",
        "@angular//packages/core",
        "@angular//packages/platform-browser",
        "@angular//packages/platform-browser/animations",
        "@angular//packages/router",
    ],
)

# We always strip these paths off the front of any assets we serve
_ROOT_DIRS = [
    "npm/node_modules/zone.js/dist",
    "npm/node_modules/@angular/material/prebuilt-themes",
]

# This devserver is written in Go and is super-fast.
# It doesn't run any bundler or code splitter. Instead, it concatenates
# UMD JavaScript code on-the-fly in-memory.
# This scales really well for massive codebases.
ts_devserver(
    name = "devserver",
    # serve these files rooted at /
    additional_root_paths = _ROOT_DIRS,
    # Start from the development version of the main
    entry_module = "angular_bazel_example/src/main.dev",
    # <script> and <link> tags will be automatically injected into this index file
    index_html = "index.html",
    # These scripts will be included in the JS bundle after require.js
    # They should have only named UMD modules, or require.js will throw.
    scripts = [
        "@npm//node_modules/tslib:tslib.js",
    ],
    # Serve these files in addition to the JavaScript bundle
    # The corresponding <script> or <link> tags will be injected into the index_html
    static_files = [
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",
        #  We load zone.js outside the bundle. That's because it's a "pollyfill"
        # which speculates that such features might be available in a browser.
        # Also it's tricky to configure dead code elimination to understand that
        # zone.js is used, given that we don't have any import statement that
        # imports from it.
        "@npm//node_modules/zone.js:dist/zone.min.js",
    ],
    # Tell Bazel to build the sources first
    deps = ["//src"],
)

rollup_bundle(
    name = "bundle",
    entry_point = "src/main.prod",
    deps = [
        "//src",
    ],
)

web_package(
    name = "prodapp",
    additional_root_paths = _ROOT_DIRS + ["npm/node_modules/systemjs/dist"],
    # do not sort
    assets = [
        "@npm//node_modules/@angular/material:prebuilt-themes/deeppurple-amber.css",
        "@npm//node_modules/zone.js:dist/zone.min.js",
        # We load system.js here as it is required in prodmode for code-splitting support.
        "@npm//node_modules/systemjs:dist/system.js",
        ":bundle.min.js",
    ],
    data = [
        ":bundle",
    ],
    # <script> and <link> tags will be automatically injected into this index.
    index_html = "index.html",
)

history_server(
    name = "prodserver",
    data = [":prodapp"],
    templated_args = ["src/prodapp"],
)
